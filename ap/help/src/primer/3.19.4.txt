package.cpath = "./?53.dll;./?.dll";

function frmclose()
	os.exit();
end
statusbar_set_parts(frm,{200,200})

local active_scene = new_child(frm,"Main");
local active_plan = get_scene_t(active_scene);
active_plan.rotate.x = -60;
active_plan.rotate.y = 0;
active_plan.rotate.z = -30;
active_plan.matrix = nil;
set_scene_t(active_scene,active_plan);

function get_shape(pt1,pt2,color)
	local outer_pts = {
		{color.r,color.g,color.b,1,1,pt1.x,pt1.y,pt1.z};
		{color.r,color.g,color.b,1,1,pt2.x,pt1.y,pt1.z};
		{color.r,color.g,color.b,1,1,pt1.x,pt2.y,pt1.z};
		{color.r,color.g,color.b,1,1,pt2.x,pt2.y,pt1.z};
		{color.r,color.g,color.b,1,1,pt1.x,pt1.y,pt2.z};
		{color.r,color.g,color.b,1,1,pt2.x,pt1.y,pt2.z};
		{color.r,color.g,color.b,1,1,pt1.x,pt2.y,pt2.z};
		{color.r,color.g,color.b,1,1,pt2.x,pt2.y,pt2.z};
	};
	local lines_pts = {
		{0,0,0,1,1,pt1.x,pt1.y,pt1.z};
		{0,0,0,1,1,pt2.x,pt1.y,pt1.z};
		{0,0,0,1,1,pt1.x,pt2.y,pt1.z};
		{0,0,0,1,1,pt2.x,pt2.y,pt1.z};
		{0,0,0,1,1,pt1.x,pt1.y,pt2.z};
		{0,0,0,1,1,pt2.x,pt1.y,pt2.z};
		{0,0,0,1,1,pt1.x,pt2.y,pt2.z};
		{0,0,0,1,1,pt2.x,pt2.y,pt2.z};
	};
	local shape = {
		surfaces = {
			{
				points = lines_pts;
				lines = {{1,2},{1,3},{2,4},{3,4};{5,6},{5,7},{6,8},{7,8};{1,5},{2,6},{3,7},{4,8}};
			};
			{
				points = outer_pts;
				outer = {1,3,4,2};
			};
			{
				points = outer_pts;
				outer = {5,6,8,7};
			};
			{
				points = outer_pts;
				outer = {1,2,6,5};
			};
			{
				points = outer_pts;
				outer = {1,5,7,3};
			};
			{
				points = outer_pts;
				outer = {2,4,8,6};
			};
			{
				points = outer_pts;
				outer = {3,7,8,4};
			};
		};
	};
	return shape;
end

local objects = {};
function add_object(pt1,pt2)
	local n = #objects;
	pt1 = pt1 or {x=5000*n,y=5000*n,z=5000*n};
	pt2 = pt2 or {x=5000*n+3000,y=5000*n+3000,z=5000*n+3000};
	local color = {r=0,g=0.5,b=1};
	local shape = get_shape(pt1,pt2,color);
	local glname,gllist = n+1,makelist(active_scene,shape);
	objects[n+1] = {pt1=pt1,pt2=pt2,color=color,glname=glname,gllist=gllist};
	scene_onpaint(active_scene);
end

local selected = nil;
function select_object(i)
	objects[i].color.r = (objects[i].color.r-0.5)%1.5;
	objects[i].color.g = (objects[i].color.g-0.5)%1.5;
	objects[i].color.b = (objects[i].color.b-0.5)%1.5;
	local object = get_shape(objects[i].pt1,objects[i].pt2,objects[i].color);
	local glname,gllist = i,makelist(active_scene,object);
	objects[i].gllist = gllist;
	scene_onpaint(active_scene);
	selected = i;
end
function select_main(i)
	select_object(i)
	statusbar_set_text(frm,1,"Selected index:"..i);
end

function snap(scene,x,y)
	for i,v in pairs(objects) do
		local shape = get_shape(v.pt1,v.pt2,v.color);
		for i,v in pairs(shape.surfaces[1].points) do
			local pt = {world_2_client(scene,v[6],v[7],v[8])};
			if math.abs(pt[1]-x)<=15 and math.abs(pt[2]-y)<=15 then
				return {x=v[6],y=v[7],z=v[8]};
			end
		end
	end
	local x,y,z = client_2_world(scene,x,y);
	return {x=x,y=y,z=z};
end

function get_drag_shape(pt1,pt2)
	local shape = {
		surfaces = {
			{
				points = {
					{1,1,1,1,1,pt1.x,pt1.y,pt1.z};
					{1,1,1,1,1,pt2.x,pt2.y,pt2.z};
				};
				lines = {{1,2}};
			};
		};
	};
	return shape;
end
local gl = require "luaext.gl"
local drag_line = nil;
function del_drag_line()
	if drag_line then
		 gl.glDeleteLists(drag_line);
		 drag_line = nil;
	end
end
function set_drag_line(pt1,pt2)
	del_drag_line();
	drag_line = makelist(active_scene,get_drag_shape(pt1,pt2));
end
function render_drags()
	if drag_line then
		gl.glCallList(drag_line);
	end
end
function on_paint(scene)
	del_drag_line();
	active_scene = scene;
end

local start_pt = nil;
function on_lbuttondown(scene,flags,x,y)
	if start_pt then
		start_pt = snap(scene,x,y);
	else 
		scene_select(scene,x,y,1,1,1);
	end
end
function on_mousemove(scene,flags,x,y)
	if type(start_pt)=="table" then
		local pt = snap(scene,x,y);
		draw_drag(scene);
		set_drag_line(start_pt,pt);
		draw_drag(scene);
	end 
end
function on_lbuttonup(scene,flags,x,y)
	if type(start_pt)=="table" then
		local pt = snap(scene,x,y);
		add_object(start_pt,pt);
		scene_cursor(scene,IDC_ARROW)
		start_pt = nil;
	end 
end

function render_objs()
	for i,v in ipairs(objects) do
		gl.glLoadName(v.glname);
		gl.glCallList(v.gllist);
	end
end

local iup = require"iuplua"
local pt1_lab = iup.label{title="Point1:",size="50x"};
local pt1_x_lab = iup.label{title="X:"};
local pt1_x_txt = iup.text{expand="Horizontal"};
local pt1_y_lab = iup.label{title="Y:"};
local pt1_y_txt = iup.text{expand="Horizontal"};
local pt1_z_lab = iup.label{title="Z:"};
local pt1_z_txt = iup.text{expand="Horizontal"};
local pt2_lab = iup.label{title="Point2:",size="50X"};
local pt2_x_lab = iup.label{title="X:"};
local pt2_x_txt = iup.text{expand="Horizontal"};
local pt2_y_lab = iup.label{title="Y:"};
local pt2_y_txt = iup.text{expand="Horizontal"};
local pt2_z_lab = iup.label{title="Z:"};
local pt2_z_txt = iup.text{expand="Horizontal"};
local color_lab = iup.label{title="Color:",size="50X"};
local color_r_lab = iup.label{title="R:"};
local color_r_txt = iup.text{expand="Horizontal",readonly="Yes",bgcolor="192 192 192"};
local color_g_lab = iup.label{title="G:"};
local color_g_txt = iup.text{expand="Horizontal",readonly="Yes",bgcolor="192 192 192"};
local color_b_lab = iup.label{title="B:"};
local color_b_txt = iup.text{expand="Horizontal",readonly="Yes",bgcolor="192 192 192"};
local ok_btn = iup.button{title="OK",size="100X"};
local cancel_btn = iup.button{title="Cancel",size="100X"};
local dlg = iup.dialog{
	title = "Property";
	size = "500X100";
	margin = "5X5";
	iup.vbox{
		iup.hbox{pt1_lab,pt1_x_lab,pt1_x_txt,pt1_y_lab,pt1_y_txt,pt1_z_lab,pt1_z_txt};
		iup.hbox{pt2_lab,pt2_x_lab,pt2_x_txt,pt2_y_lab,pt2_y_txt,pt2_z_lab,pt2_z_txt};
		iup.hbox{color_lab,color_r_lab,color_r_txt,color_g_lab,color_g_txt,color_b_lab,color_b_txt};
		iup.hbox{iup.fill{},ok_btn,cancel_btn};
	};
}
function init_dlg()
	if type(selected)~="number" or selected<=0 or selected>#objects then return end
	pt1_x_txt.value = objects[selected].pt1.x;
	pt1_y_txt.value = objects[selected].pt1.y;
	pt1_z_txt.value = objects[selected].pt1.z;
	pt2_x_txt.value = objects[selected].pt2.x;
	pt2_y_txt.value = objects[selected].pt2.y;
	pt2_z_txt.value = objects[selected].pt2.z;
	color_r_txt.value = objects[selected].color.r;
	color_g_txt.value = objects[selected].color.g;
	color_b_txt.value = objects[selected].color.b;
end
function ok_btn:action()
	if type(selected)~="number" or selected<=0 or selected>#objects then return end
	objects[selected].pt1.x = pt1_x_txt.value;
	objects[selected].pt1.y = pt1_y_txt.value;
	objects[selected].pt1.z = pt1_z_txt.value;
	objects[selected].pt2.x = pt2_x_txt.value;
	objects[selected].pt2.y = pt2_y_txt.value;
	objects[selected].pt2.z = pt2_z_txt.value;
	select_object(selected)
	scene_onpaint(active_scene);
	dlg:hide();
end
function cancel_btn:action()
	dlg:hide();
end
function show_dlg()
	init_dlg();
	dlg:popup();
end
function on_lbuttondblclk(scene,flags,x,y)
	show_dlg();
end

local clip = {};
clip.name_lab = iup.label{title="Name:",size="50x"};
clip.name_txt = iup.text{expand="Horizontal"};
clip.o_lab = iup.label{title="Origin:",size="50x"};
clip.o_x_lab = iup.label{title="X:"};
clip.o_x_txt = iup.text{expand="Horizontal"};
clip.o_y_lab = iup.label{title="Y:"};
clip.o_y_txt = iup.text{expand="Horizontal"};
clip.o_z_lab = iup.label{title="Z:"};
clip.o_z_txt = iup.text{expand="Horizontal"};
clip.x_lab = iup.label{title="X-Axis:",size="50X"};
clip.x_x_lab = iup.label{title="X:"};
clip.x_x_txt = iup.text{expand="Horizontal"};
clip.x_y_lab = iup.label{title="Y:"};
clip.x_y_txt = iup.text{expand="Horizontal"};
clip.x_z_lab = iup.label{title="Z:"};
clip.x_z_txt = iup.text{expand="Horizontal"};
clip.z_lab = iup.label{title="Z-Axis:",size="50x"};
clip.z_x_lab = iup.label{title="X:"};
clip.z_x_txt = iup.text{expand="Horizontal"};
clip.z_y_lab = iup.label{title="Y:"};
clip.z_y_txt = iup.text{expand="Horizontal"};
clip.z_z_lab = iup.label{title="Z:"};
clip.z_z_txt = iup.text{expand="Horizontal"};
clip.ok_btn = iup.button{title="OK",size="100X"};
clip.cancel_btn = iup.button{title="Cancel",size="100X"};
clip.dlg = iup.dialog{
	title = "Work Plan";
	size = "500X100";
	margin = "5X5";
	iup.vbox{
		iup.hbox{clip.name_lab,clip.name_txt};
		iup.hbox{clip.o_lab,clip.o_x_lab,clip.o_x_txt,clip.o_y_lab,clip.o_y_txt,clip.o_z_lab,clip.o_z_txt};
		iup.hbox{clip.x_lab,clip.x_x_lab,clip.x_x_txt,clip.x_y_lab,clip.x_y_txt,clip.x_z_lab,clip.x_z_txt};
		iup.hbox{clip.z_lab,clip.z_x_lab,clip.z_x_txt,clip.z_y_lab,clip.z_y_txt,clip.z_z_lab,clip.z_z_txt};
		iup.hbox{iup.fill{},clip.ok_btn,clip.cancel_btn};
	};
}
function clip.init_dlg()
	local plan = active_scene and get_scene_t(active_scene);
	clip.o_x_txt.value = plan and plan.clip.pt.x or 0;
	clip.o_y_txt.value = plan and plan.clip.pt.y or 0;
	clip.o_z_txt.value = plan and plan.clip.pt.z or 0;
	clip.x_x_txt.value = plan and plan.clip.x.x or 1;
	clip.x_y_txt.value = plan and plan.clip.x.y or 0;
	clip.x_z_txt.value = plan and plan.clip.x.z or 0;
	clip.z_x_txt.value = plan and plan.clip.z.x or 0;
	clip.z_y_txt.value = plan and plan.clip.z.y or 0;
	clip.z_z_txt.value = plan and plan.clip.z.z or 1;
end
function clip.ok_btn:action()
	active_scene = new_child(frm,clip.name_txt.value);
	local plan = get_scene_t(active_scene);
	plan.clip.pt.x = clip.o_x_txt.value;
	plan.clip.pt.y = clip.o_y_txt.value;
	plan.clip.pt.z = clip.o_z_txt.value;
	plan.clip.x.x = clip.x_x_txt.value;
	plan.clip.x.y = clip.x_y_txt.value;
	plan.clip.x.z = clip.x_z_txt.value;
	plan.clip.z.x = clip.z_x_txt.value;
	plan.clip.z.y = clip.z_y_txt.value;
	plan.clip.z.z = clip.z_z_txt.value;
	set_scene_t(active_scene,plan);
	scene_onpaint(active_scene);
	clip.dlg:hide();
end
function clip.cancel_btn:action()
	clip.dlg:hide();
end
function clip.show_dlg()
	clip.init_dlg();
	clip.dlg:popup();
end


local ID_PROPERTY = ID+1;
local ID_ADD = ID+2;
local ID_DRAW = ID+3;
local ID_PLAN = ID+4;
add_menu(
	frm,
	{	
		name = "Cube",
		nposition = 2,
		items = 
		{	
			{id=ID_PROPERTY,name="Property"},
			{id=ID_ADD,name="Add"},
			{id=ID_DRAW,name="Draw"},
			{id=ID_PLAN,name="Plan"},
		},
	}
);
crt_toolbar(frm,
	{
		bmpname = "toolbar1.bmp",
		nbmps = 3, 
		dxButton = 0,
		dyButton = 0,
		dxBitmap = 16,
		dyBitmap = 16,
		buttons = {
			{iBitmap=2,idCommand=ID_ADD,iString="Add",fsState=TBSTATE_ENABLED,fsStyle=BTNS_BUTTON,},
			{iBitmap=3,idCommand=ID_DRAW,iString="Draw",fsState=TBSTATE_ENABLED,fsStyle=BTNS_BUTTON,},
			{iBitmap=5,idCommand=ID_PROPERTY,iString="Property",fsState=TBSTATE_ENABLED,fsStyle=BTNS_BUTTON,},
			{iBitmap=6,idCommand=ID_PLAN,iString="Plan",fsState=TBSTATE_ENABLED,fsStyle=BTNS_BUTTON,},
		},
	}
);
local commands = {};
commands[ID_PROPERTY] = function(scene)
	show_dlg();
end
commands[ID_ADD] = function(scene)
	add_object();
end
commands[ID_DRAW] = function(scene)
	start_pt = true;
	scene_cursor(scene,IDC_CROSS)
end
commands[ID_PLAN] = function(scene)
	clip.show_dlg();
end
function on_command(id,scene)
	if type(commands[id])=="function" then
		commands[id](scene);
	end
end
local frmcommands = {};
frmcommands[ID_PLAN] = function(scene)
	clip.show_dlg();
end
function frm_on_command(id,scene)
	if type(frmcommands[id])=="function" then
		frmcommands[id](scene);
	end
end

